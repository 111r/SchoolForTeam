
@{
    ViewBag.Title = "ExamObtainedMarks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>

    /* Sticky headers */
    .fixTableHead thead th {
        position: sticky;
        top: 0;
        background-color: #f0f0f0;
        z-index: 2;
    }

    /* Sticky second column */
    .sticky-column {
        position: sticky;
        left: 0;
        background-color: #fff; /* Change to your desired background color */
        z-index: 1;
    }

    /* Other CSS remains unchanged */

    table {
        border-collapse: collapse;
        width: 100%;
        /* Add a specific height to the table container */
        height: 500px;
    }

    .table.dataTable thead .dynamic-header {
        color: white !important;
    }

    th,
    td {
        padding: 8px 15px;
        border: 2px solid #529432;
    }

    th {
        background: #f0f0f0;
    }

    /* Add a specific height to the container for sticky scrolling */
    .fixTableHead {
        overflow-y: scroll;
        height: 500px;
    }

    .tooltip-note {
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
        margin-top: 10px;
        margin-bottom: 10px;
    }

        .tooltip-note h4 {
            font-size: 16px;
            margin-bottom: 5px;
        }

        .tooltip-note p {
            font-size: 14px;
            margin: 0;
            padding-left: 15px;
        }

    .important-text {
        font-weight: bold;
        color: #333;
    }

    .absent-indicator {
        display: inline-block;
        background-color: #ff6666;
        color: #fff;
        font-weight: bold;
        padding: 2px 5px;
        border-radius: 3px;
    }

    .error-border {
        border-color: red;
    }

    .select2-container .select2-selection--single {
        height: 34px !important;
    }

    .select2-container--default .select2-selection--single {
        border: 1px solid #ccc !important;
        border-radius: 0px !important;
    }

    tr.disabled {
        opacity: 0.5; /* Adjust opacity to visually indicate the disabled state */
        pointer-events: none; /* Prevent pointer events on the disabled row */
    }
</style>
<script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/select2.min.js"></script>
<div class="right_col" role="main">
    <div class="row">
        <!-- row started -->
        <h2>Exam Obtained Marks</h2>
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="row">
                @*<h4 class="std_head well-sm"> Staff Information Form</h4>*@
                <div class="tab-content tab_sis">
                    <div class="tab-pane fade in active" id="add">
                        <div class="row">

                            <div class="col-sm-4">
                                <div class="form-group">
                                    <label>Select Staff :</label>

                                    <select class="form-control select2  " id="Staff_Id" name="Staff_Id">
                                        <option value="0">---Select Staff---</option>
                                        @foreach (var item in ViewBag.Staff as IEnumerable<SchoolManagement.Data.Models.StafsDetails>)
                                        {
                                            <option value="@item.StafId">@item.Name</option>
                                        }

                                    </select>

                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    <label>Class :</label>
                                    <select class="form-control select2 " id="ClassID" name="ClassID">
                                        <option value="0">---Select Class---</option>


                                    </select>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    <label>Section :</label>
                                    <select class="form-control select2 " id="SectionId" name="SectionId">
                                        <option value="0">---Select Section---</option>
                                    </select>
                                </div>
                            </div>

                        </div>
                        <div class="row">


                            <div class="col-sm-4">
                                <div class="form-group">
                                    <label>Term :</label>
                                    <select class="form-control select2 " id="TermID" name="TermID">
                                        <option value="0">---Select Term---</option>
                                        @foreach (var item in ViewBag.Terms as IEnumerable<SchoolManagement.Website.Models.Tbl_Term>)
                                        {
                                            <option value="@item.TermID">@item.TermName</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            @*<div class="col-sm-4">
                                    <div class="form-group">
                                        <label>Select Batch :</label>

                                        <select class="form-control select2  " id="Batch_Id" name="Batch_Id">
                                            <option value="0">---Select Batch---</option>
                                            @foreach (var item in ViewBag.BatchList as IEnumerable<SchoolManagement.Data.Models.BatchListDTO>)
                                            {
                                                <option value="@item.Batch_Id">@item.Batch_Name</option>
                                            }

                                        </select>

                                    </div>
                                </div>*@


                            <div class="col-sm-4">
                                <div class="form-group">
                                    <label>Batch :</label>
                                    <select class="form-control select2 " id="BatchID" name="BatchID">
                                        <option value="0">---Select Batch---</option>
                                        @foreach (var item in ViewBag.Batch as IEnumerable<SchoolManagement.Website.Models.Tbl_Batches>)
                                        {
                                            <option value="@item.Batch_Id">@item.Batch_Name</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="col-sm-4">
                                <div class="form-group col-sm-6 " style="text-align:center;top: 24px;">
                                    <button type="button" class=" btn btn-success " id="BtnShowStudent" style="width:100%">Show</button>
                                </div>
                                <div class="form-group col-sm-6  " style="text-align:center;top: 24px;">
                                    <button class="btn btn-info " style="width:100%"><a href="~/Exam/ReportCard" class="button_a">Reports</a></button>
                                </div>

                            </div>


                        </div>
                        <hr />
                        <div class="tooltip-note">
                            <h4>Important Note:</h4>
                            <ul>
                                <li><span class="important-text">Absent marks</span> will be indicated by <span class="absent-indicator">'-1'</span>.</li>
                                <li>Please enter only <span class="important-text">'-1'</span> and digits.</li>
                                <li>If the entered marks exceed the maximum marks, the input field will be outlined in <span class="important-text">red</span> to indicate the exceeded value.</li>
                                <li>
                                    For optional subjects, these marks correspond to the following grades:
                                    <ul>
                                        <li>1 - A</li>
                                        <li>2 - B</li>
                                        <li>3 - C</li>
                                        <li>4 - D</li>
                                    </ul>
                                </li>
                            </ul>
                            <button id="exportButton" class="btn btn-primary" style="display: none;">Export to Excel</button>
                        </div>

                        <div class="table-responsive fixTableHead">

                            <table class="table table-bordered " id="TableStudent">
                                <thead>
                                    <tr id="HeaderRow">

                                        <th style="color:white !important">S.No</th>
                                        <th style="z-index:100;color:white !important">Student Name</th>
                                    </tr>
                                </thead>
                                <tbody id="TableBody"></tbody>
                            </table>

                            <button class="btn btn-success pull-right" id="SaveButton">Save</button>


                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.blockUI/2.70/jquery.blockUI.min.js"></script>
    <script src="~/Scripts/DevelopmentJS/Exam.js"></script>
}
<script>


    function getClassData(staffId) {

        // Make an AJAX request to the controller method
        $.ajax({
            url: '/Exam/GetStaffClass', // Replace with the actual URL of your controller method
            type: 'GET',
            data: { staffId: staffId },
            success: function (data) {
                // Populate the class select box with the retrieved data
                var classSelect = $('#ClassID');
                classSelect.empty();
                classSelect.append('<option value="0">---Select Class---</option>');
                $.each(data, function (index, item) {
                    classSelect.append('<option value="' + item.DataListItemId + '">' + item.DataListItemName + '</option>');
                });
            },
            error: function () {
                // Handle error if any
            }
        });
    }

    function getSectionData(staffId, classId) {
        // Make an AJAX request to the controller method
        $.ajax({
            url: '/Exam/GetClassSection', // Replace with the actual URL of your controller method
            type: 'GET',
            data: { staffId: staffId, classId: classId },
            success: function (data) {
                // Populate the class select box with the retrieved data
                var classSelect = $('#SectionId');
                classSelect.empty();
                classSelect.append('<option value="0">---Select Section---</option>');
                $.each(data, function (index, item) {
                    classSelect.append('<option value="' + item.DataListItemId + '">' + item.DataListItemName + '</option>');
                });
            },
            error: function () {
                // Handle error if any
            }
        });
    }
    //Obtained Marks
    function getTestData(classId, termId, staffId, sectionId) {
        // Make an AJAX request to the controller method
        $.ajax({
            url: '/Exam/TestByClassId', // Replace with the actual URL of your controller method
            type: 'GET',
            data: { classId: classId, termId: termId, staffId: staffId, sectionId: sectionId },
            success: function (data) {
                // Populate the class select box with the retrieved data
                var TestIdSelect = $('#TestId');
                TestIdSelect.empty();
                TestIdSelect.append('<option value="0">---Select Test---</option>');
                $.each(data, function (index, item) {
                    TestIdSelect.append('<option value="' + item.TestID + '">' + item.TestName + '</option>');
                });
            },
            error: function () {
                // Handle error if any
            }
        });
    }

    //Get Terms Marks
    function getTermData() {
        // Make an AJAX request to the controller method
        $.ajax({
            url: '/Exam/TermsData', // Replace with the actual URL of your controller method
            type: 'GET',
            success: function (data) {
                // Populate the class select box with the retrieved data
                var TestIdSelect = $('#TermID');
                TestIdSelect.empty();
                TestIdSelect.append('<option  value="0">---Select Term---</option>');
                $.each(data, function (index, item) {
                    TestIdSelect.append('<option value="' + item.TermID + '">' + item.TermName + '</option>');
                });
            },
            error: function () {
                // Handle error if any
            }
        });
    }

    //Get Terms Marks
    function getSubjectData(classId, staffId) {
        // Make an AJAX request to the controller method
        $.ajax({
            url: '/Exam/GetStaffSubjects', // Replace with the actual URL of your controller method
            type: 'GET',
            data: { classId: classId, staffId: staffId },
            success: function (data) {
                // Populate the class select box with the retrieved data
                var TestIdSelect = $('#SubjectId');
                TestIdSelect.empty();
                TestIdSelect.append('<option value="0">---Select Subject---</option>');
                $.each(data, function (index, item) {
                    TestIdSelect.append('<option value="' + item.Subject_ID + '">' + item.Subject_Name + '</option>');
                });
            },
            error: function () {
                // Handle error if any
            }
        });
    }
    $(document).ready(function () {

        $('.select2').select2();

        //$('#BatchID').change(function () {
        //    var selectedOptionId = $(this).val();
        //    getClassData(selectedOptionId); // Call your function and pass the selected option ID as a parameter
        //});
        $('#Staff_Id').change(function () {
            var selectedOptionId = $(this).val();
            getClassData(selectedOptionId); // Call your function and pass the selected option ID as a parameter
        });

        $('#ClassID').change(function () {
            var selectedOptionId = $(this).val();
            var selectedStaffId = $('#Staff_Id').val();
            getSectionData(selectedStaffId, selectedOptionId); // Call your function and pass the selected option ID as a parameter
            // getSubjectData(selectedOptionId, selectedOptionId)
        });

        //$('#TermID').change(function () {
        //    var selectedOptionId = $(this).val();
        //    var selectedClassId = $('#ClassID').val();
        //    var selectedTermId = $('#TermID').val();
        //    var selectedStaffId = $('#Staff_Id').val();
        //    var selectedSectionId = $('#SectionId').val();
        //    getTestData(selectedClassId, selectedTermId, selectedStaffId, selectedSectionId); // Call your function and pass the selected option ID as a parameter
        //});
        $('#SectionId').change(function () {
            var selectedOptionId = $(this).val();
            getTermData(); // Call your function and pass the selected option ID as a parameter
        });

        // Add the "sticky-column" class to the 2nd column (index 1)
        //const table = $('#TableStudent');
        //const secondColumnCells = table.find('tr > :nth-child(2)');
        //secondColumnCells.addClass('sticky-column');
        $("#exportButton").click(function () {
            var selectedClassText = $("#ClassID option:selected").text();
            var selectedSectionText = $("#SectionId option:selected").text();
            var currentDateTime = new Date().toISOString().replace(/[-:.]/g, "");
            var fileName = selectedClassText + "_" + selectedSectionText + "_" + currentDateTime + ".xlsx";

            var table = $("#TableStudent")[0];

            // Get the header row to extract column headers
            var headerRow = table.querySelector("thead tr");
            var dynamicHeaders = Array.from(headerRow.cells)
                .map(cell => cell.textContent)
                .filter(header => header !== "Teacher Remark" && header !== "BatchId");
            dynamicHeaders.push("Rank In Class");
            dynamicHeaders.push("Total Maximum Marks");
            dynamicHeaders.push("Total Mark");
            dynamicHeaders.push("Percentage");
            dynamicHeaders.push("Grade");
           
            // Create an empty data array to store rows
            var dynamicData = [];

            // Iterate through each row in the table body
            var bodyRows = table.querySelectorAll("tbody tr");
            var rowIndex = 0;

            // Get the stored grade data from local storage
            var gradeData = JSON.parse(localStorage.getItem('gradeData'));
            //---x-rnik--
            var totalMaxMark = 0;
            var totalMark = 0;
            //---
            // Start processing rows sequentially
            processRow();

            function processRow() {
                if (rowIndex < bodyRows.length) {
                    var row = bodyRows[rowIndex];
                    var rowData = [];
                    totalMaxMark = 0;
                    totalMark = 0;
                    Array.from(row.cells).forEach(function (cell) {
                        var input = cell.querySelector("input");
                        if (input) {
                            var inputValue = input.value;
                            var inputName = input.name;
                            var inputNameParts = inputName.split("-");
                            if (input.className != "optional") {

                                if (inputNameParts[0] != "") { //---xrnik
                                    totalMaxMark += parseFloat(inputNameParts[0]);
                                }
                            }
                            var inputType = input.getAttribute("type");

                            if (inputType === "text") {
                                // Handle text input if needed
                                if (inputNameParts[2] !== "Teacher Remark") {
                                    var inputValue = input.value;
                                    rowData.push(inputValue);
                                }
                            }
                            else if (inputValue === "-1") {
                                inputValue = "AB";
                                rowData.push(inputValue);
                            }
                            else if (inputValue === "-2") {
                                inputValue = "NA";
                                rowData.push(inputValue);
                            }
                            else {
                                if (input.className != "optional") {
                                    totalMark += parseFloat(inputValue);
                                }
                                var per = (parseFloat(inputValue) / parseFloat(inputNameParts[0])) * 100;


                                // Calculate the grade based on the stored grade data
                                var grade = calculateGrade(gradeData, per);

                                if (input.className == "optional") {
                                    //debugger
                                    grade = calculateOptionalGrade(inputValue)
                                }


                                rowData.push(inputValue + " - " + grade);
                            }

                        } else {
                            var rankSpan = cell.querySelector("span.rank");
                            if (rankSpan) {
                                rowData.push(rankSpan.textContent.trim()); // ✅ Add rank
                            } else {
                                rowData.push(cell.textContent.trim());
                            }
                            //var span = cell.querySelector("span");
                            //if (span) {

                            //} else {
                            //    rowData.push(cell.textContent);
                            //}

                        }
                    });
                    //totalMax marl
                    // Add additional data only if there is an input

                    if (totalMaxMark > 0) {
                        rowData.push(totalMaxMark);
                        rowData.push(totalMark);
                        var perc = (totalMark / totalMaxMark) * 100;
                        rowData.push(perc.toFixed(2));
                        var grade = calculateGrade(gradeData, perc);
                        rowData.push(grade);
                    }
                    dynamicData.push(rowData);

                    rowIndex++;
                    processRow(); // Move to the next row
                } else {
                    // All rows have been processed, proceed to exporting
                    // Insert dynamic headers as the first row
                    dynamicData.unshift(dynamicHeaders);

                    // Create a worksheet with the dynamic data
                    var worksheet = XLSX.utils.aoa_to_sheet(dynamicData);

                    // Create a workbook and add the worksheet
                    var workbook = XLSX.utils.book_new();
                    XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");

                    // Export the workbook to an Excel file
                    var selectedClassText = $("#ClassID option:selected").text();
                    var selectedSectionText = $("#SectionId option:selected").text();
                    var currentDateTime = new Date().toISOString().replace(/[-:.]/g, "");
                    var fileName = selectedClassText + "_" + selectedSectionText + "_" + currentDateTime + ".xlsx";
                    var excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });

                    saveExcelFile(excelBuffer, fileName);
                }
            }

        });

        function saveExcelFile(buffer, fileName) {
            var blob = new Blob([buffer], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
            var url = URL.createObjectURL(blob);
            var link = document.createElement("a");
            link.href = url;
            link.download = fileName;
            link.click();
        }


        function calculateGrade(gradeData, percentage) {
            // Find the appropriate grade from the grade data
            var matchingGrade = gradeData.find(function (gradeEntry) {
                return percentage >= gradeEntry.MinimumPercentage && percentage <= gradeEntry.MaximumPercentage;
            });

            return matchingGrade ? matchingGrade.Grade : "D"; // Default to "D" if no grade is found
        }

        function calculateOptionalGrade(inputValue) {
            // Find the appropriate grade from the grade data
            //debugger

            return inputValue == 1 ? "A" : inputValue == 2 ? "B" : inputValue == 3 ? "C" : "D"; // Default to "D" if no grade is found
        }
    });
</script>